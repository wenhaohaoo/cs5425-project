# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Sentiment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date=None, positive=None, negative=None, tweet_count=None):  # noqa: E501
        """Sentiment - a model defined in OpenAPI

        :param date: The date of this Sentiment.  # noqa: E501
        :type date: date
        :param positive: The positive of this Sentiment.  # noqa: E501
        :type positive: float
        :param negative: The negative of this Sentiment.  # noqa: E501
        :type negative: float
        :param tweet_count: The tweet_count of this Sentiment.  # noqa: E501
        :type tweet_count: float
        """
        self.openapi_types = {
            'date': date,
            'positive': float,
            'negative': float,
            'tweet_count': float
        }

        self.attribute_map = {
            'date': 'date',
            'positive': 'positive',
            'negative': 'negative',
            'tweet_count': 'tweet_count'
        }

        self._date = date
        self._positive = positive
        self._negative = negative
        self._tweet_count = tweet_count

    @classmethod
    def from_dict(cls, dikt) -> 'Sentiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Sentiment of this Sentiment.  # noqa: E501
        :rtype: Sentiment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date(self):
        """Gets the date of this Sentiment.


        :return: The date of this Sentiment.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Sentiment.


        :param date: The date of this Sentiment.
        :type date: date
        """

        self._date = date

    @property
    def positive(self):
        """Gets the positive of this Sentiment.


        :return: The positive of this Sentiment.
        :rtype: float
        """
        return self._positive

    @positive.setter
    def positive(self, positive):
        """Sets the positive of this Sentiment.


        :param positive: The positive of this Sentiment.
        :type positive: float
        """

        self._positive = positive

    @property
    def negative(self):
        """Gets the negative of this Sentiment.


        :return: The negative of this Sentiment.
        :rtype: float
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this Sentiment.


        :param negative: The negative of this Sentiment.
        :type negative: float
        """

        self._negative = negative

    @property
    def tweet_count(self):
        """Gets the tweet_count of this Sentiment.


        :return: The tweet_count of this Sentiment.
        :rtype: float
        """
        return self._tweet_count

    @tweet_count.setter
    def tweet_count(self, tweet_count):
        """Sets the tweet_count of this Sentiment.


        :param tweet_count: The tweet_count of this Sentiment.
        :type tweet_count: float
        """

        self._tweet_count = tweet_count
